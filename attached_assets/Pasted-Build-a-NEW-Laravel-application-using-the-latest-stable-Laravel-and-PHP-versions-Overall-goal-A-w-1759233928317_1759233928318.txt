Build a NEW Laravel application using the latest stable Laravel and PHP versions.

Overall goal:
A web-first nutrition app (session auth + Blade forms) whose business logic lives in Services/Repositories and is reused by an API layer. Web controllers never talk directly to models; they call services. API controllers also call the same services.

Critical constraints:
- Do NOT use Vite or any dev asset server.
- APP_URL MUST be HTTPS.
- Frontend assets are static files under /public/css and /public/js with simple links:
  <link rel="stylesheet" href="/css/app.css">
  <script src="/js/app.js" defer></script>

Scope:
- Users: register, login, logout (session guard).
- Foods: CRUD; user-owned foods are private; global foods are readable by all.
- Portions/Entries: user logs intake (grams) for a food; group entries by day; per-day totals (kcal, protein, carbs, fat).
- Macro calculation service (Mifflin–St Jeor + activity factors); reusable from web & API.

UX specifics (web, session-auth):
- Dashboard (after login) shows today’s totals and two fast “Add Portion” methods:
  1) **Big single input** that accepts `<slug>-<grams>` where slug can include underscores and grams is numeric.
     Examples: `chicken_breast-150`, `green_apple-150`.
     Validation: slug pattern `^[a-z0-9_]+$` (lowercase, digits, underscores), separator is a single hyphen, grams > 0 (allow decimal).
     On submit, parse and log the portion; refresh today’s totals immediately.
  2) Food cards list (icon/name/slug/kcal/macros) each with a grams input and an “Add portion” button.
- Foods page: owner CRUD + view global foods (read-only).
- Entries page: list of days with totals (kcal/P/C/F), pagination by date.
- Macro calculator page: form calls the service; shows recommended calories/macros (no persistence required).

Architecture:
- Controllers SLIM.
- Services: macro math, daily rollups, food/portion operations.
- Repositories: encapsulate ALL DB operations (no Eloquent in controllers/services).
- Form Requests + Value Objects for validation and strong typing.
- Web routes (session auth, `auth` middleware) call services directly and render Blade views.
- API routes exist separately and reuse the same services; write endpoints protected by Sanctum tokens. Do NOT use API for web login/dashboard.

Data & DB:
- Default DB: **SQLite** (create `database/database.sqlite` automatically).
- Provide Docker artifacts (php-fpm + nginx + MySQL + phpMyAdmin) for later deployment, but do NOT wire MySQL on Replit by default.

Auth & security:
- Web uses `web` guard (session cookies) with CSRF-protected forms.
- API uses Sanctum **personal access tokens** for mutations; reads can be public where appropriate.
- Do NOT protect Blade routes with `auth:sanctum`.

Environment (must be auto-configured):
- Generate APP_KEY.
- `.env` for Replit HTTPS:
  - `APP_ENV=local`, `APP_DEBUG=true`
  - `APP_URL=https://<REPL_PUBLIC_HOST>` (detect at runtime)
  - `ASSET_URL=https://<REPL_PUBLIC_HOST>`
  - `TRUSTED_PROXIES=*`
  - `FORCE_HTTPS=true`
  - `SESSION_DRIVER=file`, `SESSION_SECURE_COOKIE=true`, `SESSION_SAME_SITE=lax`, `SESSION_COOKIE=nutrition_session`, `SESSION_DOMAIN=` (empty)
  - `DB_CONNECTION=sqlite` (use `database/database.sqlite` by default)

Run configuration (one button):
- On Run: ensure `public/css/app.css` and `public/js/app.js` exist (create if missing), ensure `database/database.sqlite` exists, run `php artisan key:generate` (if missing), `php artisan optimize:clear`, `php artisan migrate --force`, then start `php artisan serve --host 0.0.0.0 --port $PORT`.

Testing:
- PHPUnit unit tests:
  - MacroCalculatorService (BMR/TDEE, per-kg vs percent strategies, rounding).
  - DailyTotalsService (roll up entries to kcal/P/C/F).
  - Portion scaling math from per-100g.
- Feature tests (web, session):
  - Register, login, redirect to /dashboard (no loop).
  - Add portion via big input using `<slug>-<grams>` (e.g., `chicken_breast-150`) and via a food card input+button; totals update.
  - Foods owner CRUD; global foods readable.
- Feature tests (API, tokens):
  - Create/update/delete foods & portions with a Sanctum token (no session).
  - List foods and entries (reads) without requiring session.

Acceptance (must pass before completion):
1) Static assets load from `/css/app.css` and `/js/app.js` over HTTPS (no mixed content; no Vite dev server).
2) Register and login via web forms → redirected to `/dashboard`. Session cookie persists; no redirect loop.
3) **Big input works**:
   - Accepts `chicken_breast-150`, `green_apple-150`.
   - Rejects invalid formats (e.g., missing hyphen, uppercase in slug, non-numeric grams).
   - On success, logs portion and updates today’s totals (kcal/P/C/F).
4) Food cards allow entering grams and adding a portion; totals update immediately.
5) Entries view shows days sorted by date with per-day totals and pagination.
6) API endpoints reuse the same services/repos (no duplicated logic). API write endpoints require Sanctum token.
7) `php artisan test` is green (unit + feature).
